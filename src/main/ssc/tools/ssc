#!/usr/bin/env bash
#
##############################################################################
# Copyright 2002-2013 LAMP/EPFL
#
# This is free software; see the distribution for copying conditions.
# There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
##############################################################################

# What does the script do?
# - It allows us to gather some info from the environment, such as
# where the script is, which is where the .jar executable is, which is
# unreliable to find from Java.
# - It allows us to give a cool name to the command, whatever
# versioning junk is used for the executable.
#
# This was majorly lifted from the Scala launch/run script.
# I know nothing of this stuff. R.C.
#


## Java
# The script tries the options below.
# If they are not found, it checks if "java" is installed on the system.

## Enable to point at a different JDK/JRE Java installation.
# (to be found in the subfolder /bin/java)
# Note also that SSC has more options if you use an JDK, rather than a JRE.
JAVA_HOME=""

# If your Java executable is not in the usual /bin position override
# here. This should be the address of the executable itself.
##JAVACMD=""


## Scala
# The script tries the options below. If no folders are found, the
# script exits.
# (SSC must find at this address not only executable scripts, but a
# full set of Scala jars)

## Enable to point at a different Scala installation
# (to be found in the subfolder /lib)
SCALA_HOME=""

# SSC can not function if SCALALIB is modified. It *must* point at a
# distribution with /lib jars.


## SSC
# The script will first try a local library (correct for a normal
# installation) then look through the options below. If no
# jar is found, the script exits.
# (for development, remove the jar from the library, then point SAKELIB
# at the development area)

## Enable to point at a different SSC installation
# (to be found in the subfolder /lib)
SAKE_HOME=""

## If your SSC jar is not in the usual /lib position override
# here. This should be the address of an ssc jar.
##SAKELIB=""



## The class to execute in Scala code
SCALA_EXECUTABLE="ssc.Runner"




## Functions
#

# Returns the location of the folder containing this script
# (usually this returns the pwd, which will be the directory
# above the /bin - the /bin being the PATH invoked)
findScriptHome () {
    # see SI-2092 and SI-5792
    local source="${BASH_SOURCE[0]}"
    # while symlink...
    while [ -h "$source" ] ; do
	local linked="$(readlink "$source")"
	local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
	source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")/.." && pwd )
}

execCommand () {
    [[ -n $SCALA_RUNNER_DEBUG ]] && echo "" && for arg in "$@"; do echo "$arg"; done && echo "";
    "$@"
}

# Returns a list of items in a directory.
# The list has a separator between items. If there are no items, the
# function returns an empty string
# $1 the directory path
# $2 the separator
# return the list of items, interspaced with the seperator
function gatherJars {

    # Test for items in the lib. If the library is empty, the gathering
    # code returns a corrupt value (the globbing path).

    local dirlist=""

    # If something there, add to classpath
    if [[ "$(ls -A $1)" ]]; then

	# Constructing the extension classpath
	# Gives bad result if /lib is empty

	for ext in "$1"/* ; do
            if [[ -z "$dirlist" ]]; then
		dirlist="$ext"
            else
		dirlist="${dirlist}$2${ext}"
            fi
	done

    fi
    echo "$dirlist"
}



# An empty list, for use with stringSepAppend
EMPTYLIST="-"

# Appends an item to a string with separator
# The separator will not be appended if the list is empty, so the
# sparators will always be between appended items.
# *Must* be initiated with EMPTYLIST (see above).
# If a value is possibly empty, it *must* be tested.
# $1 the string
# $2 the item to be appended
# $3 the separator
# return the list with $2 appended (and any seperator)
function stringSepAppend {
    if [[ "$1" == EMPTYLIST ]]; then
	echo "$2"
    else
	echo "$1$3$2"
    fi
}


## big deal of debug
# Not sure what the right default is here: trying nonzero.
scala_exit_status=127
saved_stty=""

# restore stty settings (echo in particular)
function restoreSttySettings() {
    if [[ -n $SCALA_RUNNER_DEBUG ]]; then
	echo "restoring stty:"
	echo "$saved_stty"
    fi
    
    stty $saved_stty
    saved_stty=""
}

function onExit() {
    [[ "$saved_stty" != "" ]] && restoreSttySettings
    exit $scala_exit_status
}

# to reenable echo if we are interrupted before completing.
trap onExit INT

# save terminal settings
saved_stty=$(stty -g 2>/dev/null)

# clear on error so we don't later try to restore them
if [[ ! $? ]]; then  
    saved_stty=""
fi
if [[ -n $SCALA_RUNNER_DEBUG ]]; then
    echo "saved stty:"
    echo "$saved_stty"
fi

unset cygwin
if uname | grep -q ^CYGWIN; then
    cygwin="$(uname)"
fi

unset mingw
if uname | grep -q ^MINGW; then
    mingw="$(uname)"
fi
## gubed fo dne - end of debug




## Script start
##

# Find the containing folder for this script
# (the folder surrounding /bin)
SCRIPT_HOME="$(findScriptHome)"
SEP=":"
TOOL_CLASSPATH=EMPTYLIST

# Possible additional command line options
WINDOWS_OPT=""
EMACS_OPT="-Denv.emacs=$EMACS"

# Remove spaces from SCRIPT_HOME on windows
if [[ -n "$cygwin" ]]; then
    SCRIPT_HOME="$(shome="$(cygpath --windows --short-name "$SCRIPT_HOME")" ; cygpath --unix "$shome")"
    # elif uname |grep -q ^MINGW; then
    #   SEP=";"
fi


if [[ -n "$cygwin" ]]; then
    if [[ "$OS" = "Windows_NT" ]] && cygpath -m .>/dev/null 2>/dev/null ; then
        format=mixed
    else
        format=windows
    fi
    SCRIPT_HOME="$(cygpath --$format "$SCRIPT_HOME")"
    if [[ -n "$JAVA_HOME" ]]; then
        JAVA_HOME="$(cygpath --$format "$JAVA_HOME")"
    fi
    TOOL_CLASSPATH="$(cygpath --path --$format "$TOOL_CLASSPATH")"
elif [[ -n "$mingw" ]]; then
    SCRIPT_HOME="$(cmd //c echo "$SCRIPT_HOME")"
    TOOL_CLASSPATH="$(cmd //c echo "$TOOL_CLASSPATH")"
fi

if [[ -n "$cygwin$mingw" ]]; then
    case "$TERM" in
        rxvt* | xterm*)
            stty -icanon min 1 -echo
            WINDOWS_OPT="-Djline.terminal=unix"
            ;;
    esac
fi




## Executables and classpaths
##

# Decide the Java executable.
# These so we know we can hunt for bin/jar etc.
is_JDK="false"
is_installed="false"

# if JAVACMD.isEmpty and !JAVA_HOME.isEmpty and JAVA_HOME.exists and .isExecutable
if [[ -z "$JAVACMD" && -n "$JAVA_HOME" && -x "$JAVA_HOME/bin/java" ]]; then
    JAVACMD="$JAVA_HOME/bin/java"
    # Look for lib/tools.jar, it's a good candidate to tell us we have a JDK
    if [[ -r "$JAVA_HOME/lib/tools.jar" ]]; then
	is_JDK="true"
    fi
fi

# try for installed versions, then
# we can use jar, javap, java, jps
if [[ -z "$JAVACMD" && -x "/usr/bin/java" ]]; then

    JAVACMD="/usr/bin/java"

    if [[ -x "/usr/bin/jar" && -x "/usr/bin/javap" && -x "/usr/bin/jps"  ]]; then
	is_JDK="true"
	is_installed="true"

    else
	echo "This script must have the variable JAVA_HOME pointed at a Java distribution folder. The script tried to look for an installation, but failed."
	onExit
    fi
fi


# Decide the Scala executable.
# These so we know we can hunt for bin/scalap etc.
# We usually get all the tools with Scala, though?

# Put the scala home on the toolpath
# if !SCALA_HOME.isEmpty and SCALA_HOME/lib.exists
# and .isReadable
if [[ -n "$SCALA_HOME" && -r "$SCALA_HOME/lib" ]]; then
    SCALALIB="$SCALA_HOME/lib"
else
    echo "This script must have the variable SCALA_HOME pointed at a Scala distribution folder (with executable .jars in /lib). An installed Scala provides no library jars."
    onExit
fi

# Ok, we have a valid Scala /lib
# Gather jars for the classpath
# Actually, we only need reflect and compler and library,
# as I recall, to kickstart ssc.Runner, but whatever.
scala_lib_contents="$(gatherJars $SCALALIB $SEP)"
if [[ -n "$scala_lib_contents" ]]; then
    TOOL_CLASSPATH="$(stringSepAppend $TOOL_CLASSPATH $scala_lib_contents $SEP)"
fi



# Gather local jars
local_lib_contents="$(gatherJars $SCRIPT_HOME/lib $SEP)"
if [[ -n "$local_lib_contents" ]]; then
    TOOL_CLASSPATH="$(stringSepAppend $TOOL_CLASSPATH $local_lib_contents $SEP)"
fi


# If a jar was found locally, job done
if [[ ! -r "$SCRIPT_HOME/lib/sake.jar" ]]; then

    # Ok, where do we find a jar?
    # if SAKELIB.isEmpty and !SAKE_HOME.isEmpty and SAKE_HOME.exists
    # and .isReadable
    if [[ -z "$SAKELIB" && -n "$SAKE_HOME" && -r "$SAKE_HOME/lib/sake.jar" ]]; then
	SAKELIB="$SAKE_HOME/lib/sake.jar"
    fi


    # Ok, if SAKE_HOME or SAKELIB have found a path we load the jar.
    if [[ -n "$SAKELIB" ]]; then
	TOOL_CLASSPATH="$(stringSepAppend $TOOL_CLASSPATH $SAKELIB $SEP)"
    else
	# No SAKELIB? We give up!
	echo "This script must have the variable SAKE_HOME pointed at a Sake distribution, or be *in* a Sake distribution (with a sake.jar found in /lib)"
	onExit
    fi
fi


# If none exist, set some Java opts
[[ -n "$JAVA_OPTS" ]] || JAVA_OPTS="-Xmx256M -Xms32M"

# break out -D and -J options and add them to JAVA_OPTS as well so
# they reach the underlying JVM in time to do some good.  The -D
# options will be available as system properties.
declare -a java_args
declare -a scala_args

# Below explains itself, if fiendish R.C.
# default to the boot classpath for speed, except on cygwin/mingw because
# JLine on Windows requires a custom DLL to be loaded.
unset usebootcp
if [[ -z "$cygwin$mingw" ]]; then
    usebootcp="true"
fi

# If using the boot classpath, also pass an empty classpath to java to
# suppress "." from materializing.
classpathArgs () {
    if [[ -n $usebootcp ]]; then
	echo "-Xbootclasspath/a:$TOOL_CLASSPATH -classpath \"\""
    else
	echo "-classpath $TOOL_CLASSPATH"
    fi
}

# SI-8358, SI-8368 -- the default should really be false, but I don't
# want to flip the default during 2.11's RC cycle
OVERRIDE_USEJAVACP="-Dscala.usejavacp=true"

while [[ $# -gt 0 ]]; do
    case "$1" in
	-D*)
	    # pass to scala as well: otherwise we lose it sometimes
	    # when we need it, e.g. communicating with a server
	    # compiler.
	    java_args=("${java_args[@]}" "$1")
	    scala_args=("${scala_args[@]}" "$1")
	    # respect user-supplied -Dscala.usejavacp
	    case "$1" in -Dscala.usejavacp*) OVERRIDE_USEJAVACP="";; esac
	    shift
	    ;;
	-J*)
	    # as with -D, pass to scala even though it will almost
	    # never be used.
	    java_args=("${java_args[@]}" "${1:2}")
	    scala_args=("${scala_args[@]}" "$1")
	    shift
	    ;;
	-toolcp)
	    TOOL_CLASSPATH="${TOOL_CLASSPATH}${SEP}${2}"
	    shift 2
	    ;;
	-nobootcp)
	    unset usebootcp
	    shift
	    ;;
	-usebootcp)
	    usebootcp="true"
	    shift
	    ;;
	-debug)
	    SCALA_RUNNER_DEBUG=1
	    shift
	    ;;
	*)
	    scala_args=("${scala_args[@]}" "$1")
	    shift
	    ;;
    esac
done

# reset "$@" to the remaining args
set -- "${scala_args[@]}"


# note that variables which may intentionally be empty must not
# be quoted: otherwise an empty string will appear as a command line
# argument, and java will think that is the program to run.
execCommand \
    "${JAVACMD:=java}" \
    $JAVA_OPTS \
    "${java_args[@]}" \
    $(classpathArgs) \
    -Dssc.java.home="$JAVA_HOME" \
    -Dssc.java.isjdk="$is_JDK" \
    -Dssc.java.installed="$is_installed" \
    -Dssc.scala.home="$SCALA_HOME" \
    $OVERRIDE_USEJAVACP \
    "$EMACS_OPT" \
    $WINDOWS_OPT \
    $SCALA_EXECUTABLE  "$@"

# record the exit status lest it be overwritten:
# then reenable echo and propagate the code.
scala_exit_status=$?
onExit
