
== SSC Guide
SSC is a Scala program. It has little use for non-Scala users. It's probably a bad idea to think of converting it for other uses. There are better languages than Scala for this kind of activity.

SSC documents Scala code. Which means it leverages scaladoc. Scaladoc is an amazing tool. It's good for programming, yet, maybe one web post on it. I tired of trying to leverage it's abilities, hence, ssc.

SSC runs from the commandline. On that,


== The bad and the good

bad
- *Not for Windows*!
- only works from commandline
- not properly built or buildable
- no JLine means no FSC
- poorly finished

good
- Java half/full-installable
- makes documentation out of broken code
- works on many folder structures, can be asked to work on any
- offers most of scaladoc's commandline options from it's own commandline (-footer, -noPrefixes etc.)
- installation-specific configuration using a local file
- no JLine/FSC means more memory for everything else.

Sorry about the Windows situation, but I can't afford a Windows computer. If someone wants to fix this, the code needs a .bat file, and fixes for bad formatting.

I wanted it, otherwise I wouldn't have coded it, but other people may not be interested.


== Alternatives
If you want a more professional tool (it seems most people are ok), in Scala source is an Ant task,

/home/rob/CodeReference/scala-2.11.0-M4/src/scaladoc/scala/tools/ant

Personally, I want my documentation right there. Putting the I in ant, ant ain't ma' thing.



=== Install/half-install to the computer
If you got Sake, you got SSC.


=== Using SSC
==== Quick try
I hate installation, so if you've go this far, try this.

Make an empty folder. Navigate in with a terminal. Run,

ssc

Nothing should happen. Nothing is good (complaints are bad).

Now put a Scala file in there. Or two. Or a bit of a Scala project. Try,

ssc

If SSC recognises anything in the folder, it will try to produce documentation. By default, it will,

- Look in several likely places for source, 
such as src/main/scala, and the top folder 
- Look for likely library folders 
and include the contents
- Make any necessary folders
- Produce documentation whatever the broken state of the code.


=== Where to find what can be changed
Type,

ssc -config

to see what can be changed. If it's in the list, it can be on the commandline. Or in a build.ssc file.

Or look at the source code for the class `Configuration`, which is definitive.
 

=== Commandline
Any of these options can be used in a build.ssc file.

SSC is a commandline tool, so it prints nothing but errors. A useful commandline option,

ssc -verbose someTask

See all the options,

ssc -help



And this,

ssc -meter buzz <someTask>

Waiting for Scala on my computers is real dull. This cheers me up.

I havn't decided which options to keep yet. Some don't work. Best say, "subject to alteration".


=== Libraries
One bad start is lost dependancies for the code. By default, SSC looks in `lib/` then `Lib/`. Make a build.ssc file to override, e.g. with this line,

libFiles = /path/to/my/library

== Extras
=== Diagrams
Like the fancy diagrams in online scaladoc? You need two items,

~ A fairly hefty computer or small codebase
Not for nothing does diagram production come with options like 'timeout' and 'restarts'
~ The program 'dot'
'dot' is confusing. 'dot' is a graph description language which comes as part of the 'graphviz' package. As do several other programs. And the program which writes 'dot' files, 'dot', can also visualize the files. But so can others.

For a Debian-based system, do this,

~ install the general 'graphviz' package on the computer
...with apt-get/synaptic, whatever. Old versions seem to be ok.

~ Run ssc
On an installed system, navigate to the top folder to be documented, then,

ssc -diagrams -verbose -meter buzz doc

Meters will help pass the time...

On packaged Linux systems, ssc should find everything ok. In ssc there are a few options for customizing production and output, of course.

https://en.wikipedia.org/wiki/Graphviz


=== Other commands
With the same intention of explaining what is going on, try this command,

ssc -classnames <some-package-qualified-classnames> introspect

it runs 'scalap' on a class.

And this command,

ssc -classnames <some-package-qualified-classnames> bytecode

will deliver the guts of the JVM.


=== build.ssc
This file can be invented and put into someplace you'd like documentation. Any configuration option added to this file overrides the default values.

It's a dead boring .ini file. It can stand you typing with a bandaged hand.


=== Finale
That's it.
