#!/usr/bin/env bash
#
##############################################################################
# Copyright 2002-2013 LAMP/EPFL
#
# This is free software; see the distribution for copying conditions.
# There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
##############################################################################

## Adjust to point at a different Java installation.
# Unless overridden by text here, the script assumes commandline
# execution and that "java" is on the system PATH.
JAVA_HOME=""
## If your Java installation is not in the usual /bin/java position
# override here.
# Not recommended, will crash Sake scripts which rely on conventional
# installation folders, to reach tools.
##JAVACMD=""

## Adjust to point at a Scala installation.
# The script will fail unless this is 
# variable is set.
SCALA_HOME=""
## If your Scala library is not in the usual /lib/ position
# override here.
# Not recommended, will crash Sake scripts which rely on conventional
# installation folders, to reach tools.
##SCALALIB=""

## Adjust to point at a Sake installation.
# The script will first guess at the library (correct for a normal
# installation) then look for a /lib/sake here.
SAKE_HOME=""
## If your Sake library is not in the usual /lib/ position
# override here.
#SAKELIB=""

## Override the positon of the Sake tmp file
# The default position is next to the script itself.
# Which will be fine for most situations.
#SAKETMP=""

## The class to execute in Scala code
SCALA_EXECUTABLE="sake.SakeFileRunner"

findScriptHome () {
    # see SI-2092 and SI-5792
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ] ; do
	local linked="$(readlink "$source")"
	local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
	source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")/.." && pwd )
}
execCommand () {
    [[ -n $SCALA_RUNNER_DEBUG ]] && echo "" && for arg in "$@"; do echo "$arg"; done && echo "";
    "$@"
}

## big deal of debug
# Not sure what the right default is here: trying nonzero.
scala_exit_status=127
saved_stty=""

# restore stty settings (echo in particular)
function restoreSttySettings() {
    if [[ -n $SCALA_RUNNER_DEBUG ]]; then
	echo "restoring stty:"
	echo "$saved_stty"
    fi
    
    stty $saved_stty
    saved_stty=""
}

function onExit() {
    [[ "$saved_stty" != "" ]] && restoreSttySettings
    exit $scala_exit_status
}

# to reenable echo if we are interrupted before completing.
trap onExit INT

# save terminal settings
saved_stty=$(stty -g 2>/dev/null)
# clear on error so we don't later try to restore them
if [[ ! $? ]]; then  
    saved_stty=""
fi
if [[ -n $SCALA_RUNNER_DEBUG ]]; then
    echo "saved stty:"
    echo "$saved_stty"
fi

unset cygwin
if uname | grep -q ^CYGWIN; then
    cygwin="$(uname)"
fi

unset mingw
if uname | grep -q ^MINGW; then
    mingw="$(uname)"
fi
## gubed fo dne - end of debug


# Finding the root folder for this Scala distribution
SCRIPT_HOME="$(findScriptHome)"
SEP=":"

# Possible additional command line options
WINDOWS_OPT=""
EMACS_OPT="-Denv.emacs=$EMACS"

# Remove spaces from SCRIPT_HOME on windows
if [[ -n "$cygwin" ]]; then
    SCRIPT_HOME="$(shome="$(cygpath --windows --short-name "$SCRIPT_HOME")" ; cygpath --unix "$shome")"
    # elif uname |grep -q ^MINGW; then
    #   SEP=";"
fi


# Gathers paths from /lib. Library .jars are in /lib
# Count the items in the lib. If the library is empty, the gathering
# code fails, and TOOL_CLASSPATH is corrupt.
for f in "$SCRIPT_HOME"/lib/* ; do
    FILECOUNT=$[$FILECOUNT+1]
done

((FILECOUNT--))

# If something there, add to classpath
if (("$FILECOUNT" != 0)) ; then

    # Constructing the extension classpath
    # Gives bad result if /lib is empty
    TOOL_CLASSPATH=""
    if [[ -z "$TOOL_CLASSPATH" ]]; then
	for ext in "$SCRIPT_HOME"/lib/* ; do
            if [[ -z "$TOOL_CLASSPATH" ]]; then
		TOOL_CLASSPATH="$ext"
            else
		TOOL_CLASSPATH="${TOOL_CLASSPATH}${SEP}${ext}"
            fi
	done
    fi

    #echo FILECOUNT
    #echo $FILECOUNT
fi


if [[ -n "$cygwin" ]]; then
    if [[ "$OS" = "Windows_NT" ]] && cygpath -m .>/dev/null 2>/dev/null ; then
        format=mixed
    else
        format=windows
    fi
    SCRIPT_HOME="$(cygpath --$format "$SCRIPT_HOME")"
    if [[ -n "$JAVA_HOME" ]]; then
        JAVA_HOME="$(cygpath --$format "$JAVA_HOME")"
    fi
    TOOL_CLASSPATH="$(cygpath --path --$format "$TOOL_CLASSPATH")"
elif [[ -n "$mingw" ]]; then
    SCRIPT_HOME="$(cmd //c echo "$SCRIPT_HOME")"
    TOOL_CLASSPATH="$(cmd //c echo "$TOOL_CLASSPATH")"
fi

if [[ -n "$cygwin$mingw" ]]; then
    case "$TERM" in
        rxvt* | xterm*)
            stty -icanon min 1 -echo
            WINDOWS_OPT="-Djline.terminal=unix"
            ;;
    esac
fi


# Put the scala home on the toolpath
# if SCALALIB.isEmpty and !SCALA_HOME.isEmpty and SCALA_HOME.exists
# and .isReadable
if [[ -z "$SCALALIB" && -n "$SCALA_HOME" && -r "$SCALA_HOME/lib/scala-library.jar" ]]; then
    SCALALIB="$SCALA_HOME/lib/scala-library.jar"
else
    echo "This script must have the variable SCALA_HOME pointed at a Scala executable (with executable .jars in /lib)"
    onExit
fi

if [[ -z "$TOOL_CLASSPATH" ]]; then
    TOOL_CLASSPATH="$SCALALIB"
else
    TOOL_CLASSPATH="${TOOL_CLASSPATH}${SEP}${SCALALIB}"
fi


# Put the sake home on the toolpath
# if SAKELIB.isEmpty and !SAKE_HOME.isEmpty and SAKE_HOME.exists and
# .isReadable
if [[ -z "$SAKELIB" && -n "$SAKE_HOME" && -r "$SAKE_HOME/lib/sake.jar" ]]; then
    SAKELIB="$SAKE_HOME/lib/sake.jar"
fi

# If SAKELIB is still empty, maybe /lib has provided
if [[ -z "$SAKELIB" && -r "$SCRIPT_HOME/lib/sake.jar" ]]; then
    SAKELIB="$SCRIPT_HOME/lib/sake.jar"
fi



# We give up!
if [[ -z "$SAKELIB" ]]; then
    echo "This script must have the variable SAKE_HOME pointed at a Sake .jar library (no .jar found in /lib)"
    onExit
fi

if [[ -z "$TOOL_CLASSPATH" ]]; then
    TOOL_CLASSPATH="$SAKELIB"
else
    TOOL_CLASSPATH="${TOOL_CLASSPATH}${SEP}${SAKELIB}"
fi


# if JAVACMD.isEmpty and !JAVA_HOME.isEmpty and JAVA_HOME.exists and
# .isExecutable
if [[ -z "$JAVACMD" && -n "$JAVA_HOME" && -x "$JAVA_HOME/bin/java" ]]; then
    JAVACMD="$JAVA_HOME/bin/java"
fi




# If none exist, set some Java opts
[[ -n "$JAVA_OPTS" ]] || JAVA_OPTS="-Xmx256M -Xms32M"

# break out -D and -J options and add them to JAVA_OPTS as well
# so they reach the underlying JVM in time to do some good.  The
# -D options will be available as system properties.
declare -a java_args
declare -a scala_args

# default to the boot classpath for speed, except on cygwin/mingw
# because JLine on Windows requires a custom DLL to be loaded.
unset usebootcp
if [[ -z "$cygwin$mingw" ]]; then
    usebootcp="true"
fi

# If using the boot classpath, also pass an empty classpath
# to java to suppress "." from materializing.
classpathArgs () {
    if [[ -n $usebootcp ]]; then
	echo "-Xbootclasspath/a:$TOOL_CLASSPATH -classpath \"\""
    else
	echo "-classpath $TOOL_CLASSPATH"
    fi
}

# SI-8358, SI-8368 -- the default should really be false,
# but I don't want to flip the default during 2.11's RC cycle
OVERRIDE_USEJAVACP="-Dscala.usejavacp=true"

while [[ $# -gt 0 ]]; do
    case "$1" in
	-D*)
	    # pass to scala as well: otherwise we lose it sometimes when we
	    # need it, e.g. communicating with a server compiler.
	    java_args=("${java_args[@]}" "$1")
	    scala_args=("${scala_args[@]}" "$1")
	    # respect user-supplied -Dscala.usejavacp
	    case "$1" in -Dscala.usejavacp*) OVERRIDE_USEJAVACP="";; esac
	    shift
	    ;;
	-J*)
	    # as with -D, pass to scala even though it will almost
	    # never be used.
	    java_args=("${java_args[@]}" "${1:2}")
	    scala_args=("${scala_args[@]}" "$1")
	    shift
	    ;;
	-toolcp)
	    TOOL_CLASSPATH="${TOOL_CLASSPATH}${SEP}${2}"
	    shift 2
	    ;;
	-nobootcp)
	    unset usebootcp
	    shift
	    ;;
	-usebootcp)
	    usebootcp="true"
	    shift
	    ;;
	-debug)
	    SCALA_RUNNER_DEBUG=1
	    shift
	    ;;
	*)
	    scala_args=("${scala_args[@]}" "$1")
	    shift
	    ;;
    esac
done

# reset "$@" to the remaining args
set -- "${scala_args[@]}"

# if JAVACMD.isEmpty and !JAVA_HOME.isEmpty and JAVA_HOME.exists and .isExecutable
if [[ -z "$JAVACMD" && -n "$JAVA_HOME" && -x "$JAVA_HOME/bin/java" ]]; then
    JAVACMD="$JAVA_HOME/bin/java"
fi


# note that variables which may intentionally be empty must not
# be quoted: otherwise an empty string will appear as a command line
# argument, and java will think that is the program to run.
execCommand \
    "${JAVACMD:=java}" \
    $JAVA_OPTS \
    "${java_args[@]}" \
    $(classpathArgs) \
    -Dsake.runner.home="$SCRIPT_HOME" \
    -Djava.home="$JAVA_HOME" \
    -Dscala.home="$SCALA_HOME" \
    -Dsake.home="$SAKELIB" \
    -Dsake.runner.tmp="$SAKETMP" \
    $OVERRIDE_USEJAVACP \
    "$EMACS_OPT" \
    $WINDOWS_OPT \
    $SCALA_EXECUTABLE  "$@"

# record the exit status lest it be overwritten:
# then reenable echo and propagate the code.
scala_exit_status=$?
onExit
